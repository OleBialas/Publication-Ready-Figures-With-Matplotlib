# Matplotlib tutorial


```{python}
from matplotlib import pyplot as plt
import numpy as np
```

## Creating (regularly spaced) subplots

With `plt.subplots()` we can create subplots in a regular grid. 
The first argument is the number of rows, the second argument is the number of columns.
Calling `plt.subplots()` without any arguments creates a single plot.
This mean we can use the same syntax whether we create one or several plots!

```{python}
fig, ax = plt.subplots(1, 2)
fig, ax = plt.subplots(2, 3)
fig, ax = plt.subplots()
```

## Matplotlib's object oriented syntax

The `plt.subplots()` function returns two objects: a `Figure` and an `Axes` (or an array of `Axes` if multiple subplots are created).
The `Figure` object is used to interact with the whole plot, for example when saving the plot as an image.
The `Axes` object is used to interact with a specific subplot, for example when plotting data or adding axis labels.
If you are used to using Matplotlib by calling its functions, for the most part you can just replace them with methods of the `Axes` object that have the same name.
For example: instead of `plt.plot(x,y)`, you can call `ax.plot(x,y)` where ax is an instance of the `Axes` object.

```{python}
fig, ax = plt.subplots()
x = np.linspace(0, 2*np.pi, 400)
y = np.sin(x**2)
ax.plot(x,y)
```


## Axis customization
The `Axes` object has a very useful `.set()` method that allow us to set axis properties like labels and ranges in a single call.
Lets use it on the example above to:
- add axis labels
- add a title
- show only the positive half of the y-axis

```{python}
fig, ax = plt.subplots()
x = np.linspace(0, 2*np.pi, 400)
y = np.sin(x**2)
ax.plot(x,y)
ax.set(xlabel="Time [s]", ylabel="Amplitude [a.u.]", title='Chirp', ylim=(0,1));
```

## Custom plotting functions
Another advantage of using the object oriented sytnax is that we can divide the code that draws the plots from the code that creates the layout.
By writing a plotting function that takes an `Axes` object as input and draws to it, we can use the same function to draw on multiple plots.
For example, if we have a function for drawing a circle and one for drawing a square.

```{python}
def plot_circle(ax):
    theta = np.linspace(0, 2*np.pi, 100)  # 100 points around the circle
    x, y = np.cos(theta), np.sin(theta)
    ax.plot(x,y)

def plot_square(ax):
    x, y = [-1, 1, 1, -1, -1], [-1, -1, 1, 1, -1]
    ax.plot(x,y)
```

We can create our subplots and then pass the `Axes` objects to the functions so they can draw on them.

```{python}
    fig, ax = plt.subplots(1, 2)
    plot_circle(ax[0])
    plot_square(ax[1])
```

Or we could use the same functions to draw a different plot.

```{python}
    fig, ax = plt.subplots(2, 3)
    plot_circle(ax[0,0])
    plot_circle(ax[1,1])
    plot_circle(ax[0,2])
    plot_square(ax[1,0])
    plot_square(ax[0,1])
    plot_square(ax[1,2])
```

Writing your plotting routines as functions using this pattern is especially useful when collaborating because it will make combining individual plots into a multi-plot figure very easy.

## Irregularly spaced plots
With `plt.subplots()`, all plots have the same size.
However, we may want to allocate more space for some plots than for others.
A function that allows this is `plt.subplot_mosaic()`.
This function takes as argument a list of lists.
Each sub-list defined on row of the plot.
The elements in the sub-lists are strings and we can extend a given subplot across multiple rows and colums by simply repeating it.

```{python}
fig, ax = plt.subplot_mosaic(
    [
        ['a', 'a', 'b'],
        ['c', 'd', 'b']
    ]
);
```

`plt.subplot_mosaic` returns a dictionary of `Axes` objects.
To access a given subplot, we have to use its name

```{python}
fig, ax = plt.subplot_mosaic(
    [
        ['a', 'a'],
        ['b','b']
    ]
)
ax['a'].plot([0,1], [0,1])
ax['b'].plot([0,1], [1,0])
```

## Freeform layout
It is also possible to create subplots without any guidelines.
By calling the `.add_axes()` method of the `Figure` object, we can manually determine the coordinates and size of a subplot.
The first two arguments of `.add_axes()` are the x and y coordinate of the new subplot's bottom left corner, the third and fourth argument are the width and height of the figure.
The method returns an `Axes` object that can be used to interact with the newly created axis

```{python}
fig, ax = plt.subplots()
ax_new = fig.add_axes([0.5, 0.5, 0.25, 0.25])
```

The coordinate system goes from 0 to 1: (0,0) is the bottom left corner, (1,1) is the top right corner and (0.5, 0.5 is the center).
The `.add_axes` method can also be used to create a subplot outside of the current figure limits.
This can be useful sometimes, for example when adding a colorbar to an existing figure.

```{python}
fig, ax = plt.subplots()
ax_new = fig.add_axes([1.01, 0.3, 0.05, 0.4])
```

While manually setting the layout can be very helpful, it is usually time consuming since it involves a certain amount of trial an error.
Thus, it is usually preferable to use `.subplots()` or `.subplot_mosaic()` and only resort to `.add_axes` in cases where those methods can not provide the necessary flexibility.

## Subplot labeling

In publications, figures must be labeled so they can be referenced in the text.
To add text to an `Axes` we can use the `.text()` method.
However, per default this method uses the coordinates of the data plotted to the axis.
This means, we would have to figure out the correct coordiantes for each subplot individually.
A convenient solution is the `.transAxes` transform that allows us to use the same normalized coordinate system as in the example above


```{python}
fig, ax = plt.subplots(3)
labels = "a", "b", "c"
for i in range(3):
    ax[i].text(0.95, 0.85, labels[i], transform=ax[i].transAxes, weight="bold")
```
